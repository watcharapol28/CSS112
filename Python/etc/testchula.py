# HW7_Function (ไม่ลบหรือแก้ไขบรรทัดนี้ หรือเพิ่มอะไรก่อนบรรทัดนี้ โดยเด็ดขาด)

# - เขียนในเซลล์นี้เท่านั้น 
# - ถ้าต้องการเขียนฟังก์ชันเพิ่ม ก็เขียนในเซลล์นี้

def create_interval(x, y):
    """
    รับ x, y เก็บค่าจำนวนเต็ม

    หาก x มีค่าน้อยกว่าหรือเท่ากับ y
    ให้คืน สตริง แทนช่วงปิดตั้งแต่ x ถึง y (รวม x และ y ด้วย)
    เช่น create_interval(3, 5) คืน '[3,5]'
        create_interval(-2, 10) คืน '[-2,10]'
        create_interval(0, 0) คืน '[0,0]
    หาก x มีค่ามากกว่า y
    ให้คืน สตริง แทนช่วงว่าง เช่น create_interval(7, 5) คืน '(0,0)'

    โดยช่วงที่คืนจะต้องไม่มีช่องว่างกั้นระหว่างเครื่องหมาย "," กับตัวเลข
    ถ้าคืน '[3, 5]' หรือ '(0 ,0)' ถือว่าไม่ผ่าน
    """
    if x > y:
        return '(0,0)'
    return '['+str(x)+','+str(y)+']'


# ---------------------------------------------------
def intersection(a, b):
    """
    รับ a เก็บสตริงแทนช่วงของจำนวนแรก เช่น '[2,4]'
    รับ b เก็บสตริงแทนช่วงของจำนวนที่สอง เช่น '[3,5]'
    
    คืน สตริง ที่เก็บค่าช่วงที่มีทั้งใน a และ b
    เช่น intersection('[2,4]', '[3,5]') คืน '[3,4]'
        intersection('[5,6]', '[3,5]') คืน '[5,5]'
        intersection('[-4,12]', '[-15,10]') คืน '[-4,10]'
        intersection('[-4,2]', '[5,10]') คืน '(0,0)'
        intersection('(0,0)', '[-15,5]') คืน '(0,0)'

    โดย
    - ช่วงทั้งในค่า a และ b และตอนคืนค่า จะประกอบด้วยเลขจำนวนเต็มสองจำนวน
      ตัวแรกคือ x ตัวที่สองคือ y 
    - x จะมีค่าน้อยกว่าหรือเท่ากับ y เสมอ
    - x กับ y จะคั่นด้วยเครื่องหมาย "," และไม่มีช่องว่าง (จะไม่มี '[3, 5]' หรือ '[2 ,4]')
    """
    a = a[1:-1:1] # a ==[] , b == []
    b = b[1:-1:1]
    a = a.split(',')
    b = b.split(',')
    x = max(int(a[0]), int(b[0]))
    y = min(int(a[1]), int(b[1]))
    if x <= y:
        return '['+str(x)+','+str(y)+']'
    return '(0,0)'

# ---------------------------------------------------
def is_subset(a, b):
    """
    รับ a เก็บสตริงแทนช่วงของจำนวนแรก เช่น '[2,4]'
    รับ b เก็บสตริงแทนช่วงของจำนวนที่สอง เช่น '[3,5]'
    โดย
    - ช่วงจะประกอบด้วยเลขจำนวนเต็มสองจำนวนตัวแรกคือ x ตัวที่สองคือ y 
    - x จะมีค่าน้อยกว่าหรือเท่ากับ y เสมอ
    - x กับ y จะคั่นด้วยเครื่องหมาย "," และไม่มีช่องว่าง (จะไม่มี '[3, 5]' หรือ '[2 ,4]')

    คืน บูลีน True ถ้า a เป็น subset ของ b
    คืน บูลีน False ถ้า a ไม่เป็น subset ของ b
    เช่น is_subset('[2,4]', '[3,5]') คืน False
        is_subset('[5,6]', '[-2,6]') คืน True
        is_subset('[3,7]', '[3,7]') คืน True
        is_subset('[-1,-1]', '[-1,-1]') คืน True
        is_subset('[5,7]', '(0,0)') คืน False
        is_subset('(0,0)', '[3,5]') คืน True
        is_subset('[0,0]', '[1,6]') คืน False
        is_subset('(0,0)', '(0,0)') คืน True
    """
    if a == '(0,0)':
        return True
    a = a[1:-1:1] # a ==[] , b == []
    b = b[1:-1:1]
    a = a.split(',')
    b = b.split(',')
    if a[0] < b[0]:
        return False
    if a[1] > b[1]:
        return False
    return True

# ---------------------------------------------------
def get_subsets(list_a, list_b):
    """
    รับ list_a, list_b ที่ต่างก็เป็นลิสต์ที่มีสมาชิกแต่ละตัวเป็นสตริงที่เก็บค่าช่วง
      โดยจะไม่มีช่วงที่ซ้อนทับกัน ตัวอย่างของลิสต์ เช่น ['[2,4]', '[5,9]', '[10,12]']
      ซึ่งสมาชิกในลิสต์จะมีการเรียงมาให้เรียบร้อยแล้ว (จะไม่มี ['[5,9]', '[2,4]'])
      และจะไม่มีสมาชิกที่เป็นช่วงว่าง

    คืน ลิสต์ ที่มีสมาชิกช่วงเป็นสมาชิก list_a ที่เป็น subset ของสมาชิกหนึ่งใน list_b
    เช่น get_subsets(['[4,6]'], []) คืน []
        get_subsets([], ['[1,7]']) คืน []
        get_subsets(['[-2,8]'], ['[5,17]']) คืน []
        get_subsets(['[-2,3]','[4,6]', '[8,9]', '[10,10]', '[15,18]'], ['[5,17]']) คืน ['[8,9]', '[10,10]']
        get_subsets(['[-2,3]','[4,6]', '[8,9]', '[10,10]', '[15,18]'], ['[0,10]', '[12,20]']) คืน ['[4,6]', '[8,9]', '[10,10]', '[15,18]']
    โดยสมาชิกในลิสต์ที่คืนมาจะเรียงลำดับจากน้อยไปมาก (ถ้าคืน ['[10,10]', '[8,9]'] ถือว่าไม่ถูกต้อง)
    """
    result = []
    if list_a == [] or list_b == []:
        return result
    for a in list_a:
        for b in list_b:
            if is_subset(a,b):
                result.append(a)
                break
    return result

# ตัวอย่างทดสอบ (แน่นอนว่าของจริงจะไม่หน้าตาแบบนี้)
# จะใช้ตัวอย่างทดสอบนี้ได้ ต้องเขียน create_interval ข้างบนให้ถูกต้องก่อน
list_size = 6000
list_a = []
list_b = []
for i in range(list_size):
    list_a.append(create_interval(i*15+4, i*15+6))
    list_a.append(create_interval(i*15+9, i*15+12))
    list_b.append(create_interval(i*15+2, i*15+10))
print(get_subsets(['[-2,3]','[4,6]', '[8,9]', '[10,10]', '[15,18]'], ['[0,10]', '[12,20]']))
#print(get_subsets(list_a, list_b)) # คำตอบของ get_subsets(list_a, list_b) ในที่นี้คือ list_a[::2]